<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Debug.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Debug.java" />
              <option name="updatedContent" value="import modelo.*;&#10;import modelo.enums.*;&#10;&#10;public class Debug {&#10;    public static void main(String[] args) {&#10;        try {&#10;            // Crear un juego de prueba&#10;            Tablero tablero = new Tablero();&#10;            Juego juego = new Juego(tablero);&#10;            &#10;            // Crear jugadores&#10;            Jugador jugador1 = new Jugador(&quot;Jugador1&quot;);&#10;            Jugador jugador2 = new Jugador(&quot;Jugador2&quot;);&#10;            &#10;            // Agregar jugadores&#10;            juego.agregarJugador(jugador1);&#10;            juego.agregarJugador(jugador2);&#10;            &#10;            // Debug inicial&#10;            System.out.println(&quot;=== Estado inicial ===&quot;);&#10;            System.out.println(&quot;Jugador1 fichas en mano: &quot; + jugador1.contarFichasEnMano());&#10;            System.out.println(&quot;Jugador2 fichas en mano: &quot; + jugador2.contarFichasEnMano());&#10;            System.out.println(&quot;Puede colocar ficha jugador1: &quot; + jugador1.puedeColocarFicha());&#10;            System.out.println(&quot;Jugador actual: &quot; + juego.getJugadorActual().getNombre());&#10;            &#10;            // Intentar colocar una ficha&#10;            Ficha ficha = jugador1.obtenerFichasPorEstado(EstadoFicha.EN_MANO).get(0);&#10;            System.out.println(&quot;\n=== Antes de colocar ===&quot;);&#10;            System.out.println(&quot;Estado de la ficha: &quot; + ficha.getEstado());&#10;            &#10;            juego.colocarFicha(0, 0, ficha);&#10;            &#10;            System.out.println(&quot;\n=== Después de colocar ===&quot;);&#10;            System.out.println(&quot;Estado de la ficha: &quot; + ficha.getEstado());&#10;            System.out.println(&quot;Jugador1 fichas en mano: &quot; + jugador1.contarFichasEnMano());&#10;            System.out.println(&quot;Puede colocar ficha jugador1: &quot; + jugador1.puedeColocarFicha());&#10;            System.out.println(&quot;Jugador actual: &quot; + juego.getJugadorActual().getNombre());&#10;            &#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/DebugCompleto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/DebugCompleto.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="import modelo.*;&#10;import modelo.enums.*;&#10;&#10;public class DebugCompleto {&#10;    public static void main(String[] args) {&#10;        try {&#10;            // Crear un juego de prueba&#10;            Tablero tablero = new Tablero();&#10;            Juego juego = new Juego(tablero);&#10;            &#10;            // Crear jugadores&#10;            Jugador jugador1 = new Jugador(&quot;Jugador1&quot;);&#10;            Jugador jugador2 = new Jugador(&quot;Jugador2&quot;);&#10;            &#10;            // Agregar jugadores&#10;            juego.agregarJugador(jugador1);&#10;            juego.agregarJugador(jugador2);&#10;            &#10;            System.out.println(&quot;=== FASE DE COLOCACIÓN ===&quot;);&#10;            &#10;            // Usar solo las primeras 6 posiciones para hacer un test más simple&#10;            int[][] posicionesColocacion = {&#10;                {0,0}, {0,3}, {0,6}, {1,1}, {1,3}, {1,5}&#10;            };&#10;            &#10;            for (int i = 0; i &lt; 6; i++) {&#10;                Jugador jugadorActual = juego.getJugadorActual();&#10;                System.out.printf(&quot;Colocando ficha %d - Jugador: %s, Fichas en mano: %d\n&quot;, &#10;                    i+1, jugadorActual.getNombre(), jugadorActual.contarFichasEnMano());&#10;                &#10;                juego.colocarFicha(posicionesColocacion[i][0], posicionesColocacion[i][1], null);&#10;                &#10;                System.out.printf(&quot;Después de colocar - Fichas en mano: %d\n&quot;, &#10;                    jugadorActual.contarFichasEnMano());&#10;            }&#10;            &#10;            System.out.println(&quot;\n=== VERIFICACIÓN DESPUÉS DE COLOCACIÓN PARCIAL ===&quot;);&#10;            System.out.println(&quot;Jugador1 fichas en mano: &quot; + jugador1.contarFichasEnMano());&#10;            System.out.println(&quot;Jugador1 fichas en tablero: &quot; + jugador1.contarFichasEnTablero());&#10;            System.out.println(&quot;Jugador2 fichas en mano: &quot; + jugador2.contarFichasEnMano());&#10;            System.out.println(&quot;Jugador2 fichas en tablero: &quot; + jugador2.contarFichasEnTablero());&#10;            &#10;            // Mostrar estado del tablero&#10;            System.out.println(&quot;\n=== ESTADO DEL TABLERO ===&quot;);&#10;            for (int i = 0; i &lt; posicionesColocacion.length; i++) {&#10;                int fila = posicionesColocacion[i][0];&#10;                int col = posicionesColocacion[i][1];&#10;                Ficha ficha = tablero.obtenerFicha(fila, col);&#10;                if (ficha != null) {&#10;                    System.out.printf(&quot;Posición (%d,%d): %s\n&quot;, fila, col, ficha.getColor());&#10;                }&#10;            }&#10;            &#10;            System.out.println(&quot;\n=== PRUEBA DE VALIDACIÓN ===&quot;);&#10;            &#10;            // Probar que las validaciones funcionan correctamente&#10;            Jugador jugadorActual = juego.getJugadorActual();&#10;            System.out.printf(&quot;Jugador actual: %s\n&quot;, jugadorActual.getNombre());&#10;            System.out.printf(&quot;Puede colocar más fichas: %s\n&quot;, jugadorActual.puedeColocarFicha());&#10;            &#10;            // Intentar colocar otra ficha (debería funcionar porque aún tienen fichas)&#10;            try {&#10;                juego.colocarFicha(2, 2, null);&#10;                System.out.println(&quot;✅ Pudo colocar ficha adicional correctamente&quot;);&#10;                System.out.printf(&quot;Fichas en mano después: %d\n&quot;, jugadorActual.contarFichasEnMano());&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;❌ Error al colocar ficha: &quot; + e.getMessage());&#10;            }&#10;            &#10;            // Verificar que después de agotar las fichas, no se pueden colocar más&#10;            System.out.println(&quot;\n=== PRUEBA DE LÍMITE DE FICHAS ===&quot;);&#10;            &#10;            // Colocar las fichas restantes hasta agotar&#10;            int fichasRestantes = jugadorActual.contarFichasEnMano();&#10;            System.out.printf(&quot;Fichas restantes del jugador actual: %d\n&quot;, fichasRestantes);&#10;            &#10;            // Intentar colocar más fichas de las que tiene&#10;            int[][] posicionesExtra = {{2,3}, {2,4}, {3,0}, {3,1}, {3,2}, {3,4}, {3,5}, {3,6}};&#10;            &#10;            for (int i = 0; i &lt; Math.min(fichasRestantes, posicionesExtra.length); i++) {&#10;                try {&#10;                    juego.colocarFicha(posicionesExtra[i][0], posicionesExtra[i][1], null);&#10;                    System.out.printf(&quot;Colocó ficha en (%d,%d). Fichas restantes: %d\n&quot;, &#10;                        posicionesExtra[i][0], posicionesExtra[i][1], jugadorActual.contarFichasEnMano());&#10;                } catch (Exception e) {&#10;                    System.out.println(&quot;❌ Error: &quot; + e.getMessage());&#10;                    break;&#10;                }&#10;            }&#10;            &#10;            System.out.println(&quot;\n=== RESULTADO FINAL ===&quot;);&#10;            System.out.println(&quot;Jugador1 fichas en mano: &quot; + jugador1.contarFichasEnMano());&#10;            System.out.println(&quot;Jugador2 fichas en mano: &quot; + jugador2.contarFichasEnMano());&#10;            System.out.println(&quot;Puede colocar Jugador1: &quot; + jugador1.puedeColocarFicha());&#10;            System.out.println(&quot;Puede colocar Jugador2: &quot; + jugador2.puedeColocarFicha());&#10;            &#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/vistas/grafica/ModoAccion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/vistas/grafica/ModoAccion.java" />
              <option name="updatedContent" value="package vistas.grafica;&#10;&#10;public enum ModoAccion {&#10;    COLOCAR,&#10;    MOVER,&#10;    ELIMINAR&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>